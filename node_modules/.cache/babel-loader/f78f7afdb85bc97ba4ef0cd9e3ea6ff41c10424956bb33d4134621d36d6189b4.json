{"ast":null,"code":"import { profileApi } from '../../api/api';\nimport { GetProfileStatusAC, SetPreloaderAC, SetProfileAC, UpdateMyStatusAC } from '../actions/actions';\nexport const getProfileTC = router => {\n  return dispatch => {\n    dispatch(SetPreloaderAC(true));\n    const profile = '/profile';\n    const userId = router.params.userId;\n    !userId ? profileApi.getUsersProfile(profile, '29840').then(response => {\n      dispatch(SetProfileAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    }) : profileApi.getUsersProfile(profile, userId).then(response => {\n      dispatch(SetProfileAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    });\n  };\n};\nexport const getProfileStatusTC = router => {\n  return dispatch => {\n    dispatch(SetPreloaderAC(true));\n    const profileStatus = '/profile/status';\n    const userId = router.params.userId;\n    !userId ? profileApi.getUsersProfileStatus(profileStatus, '29840').then(response => {\n      dispatch(GetProfileStatusAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    }) : profileApi.getUsersProfileStatus(profileStatus, userId).then(response => {\n      dispatch(GetProfileStatusAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    });\n  };\n};\nexport const updateMyStatusTC = message => {\n  return dispatch => {\n    dispatch(SetPreloaderAC(true));\n    const profileStatus = '/profile/status';\n    profileApi.updateMyProfileStatus(profileStatus, message).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(UpdateMyStatusAC(message));\n        dispatch(SetPreloaderAC(false));\n      }\n    });\n  };\n};","map":{"version":3,"names":["profileApi","GetProfileStatusAC","SetPreloaderAC","SetProfileAC","UpdateMyStatusAC","getProfileTC","router","dispatch","profile","userId","params","getUsersProfile","then","response","data","getProfileStatusTC","profileStatus","getUsersProfileStatus","updateMyStatusTC","message","updateMyProfileStatus","resultCode"],"sources":["/home/INTEXSOFT/ivan.cherkas/PROJECTS/way-of-the-samurai/src/redux/thunk/profile-thunk.ts"],"sourcesContent":["import { profileApi } from '../../api/api'\nimport {\n  GetProfileStatusAC,\n  SetPreloaderAC,\n  SetProfileAC,\n  UpdateMyStatusAC,\n} from '../actions/actions'\n\nexport const getProfileTC = (router: any) => {\n  return (dispatch: any) => {\n    dispatch(SetPreloaderAC(true))\n    const profile = '/profile'\n    const userId = router.params.userId\n    !userId\n      ? profileApi.getUsersProfile(profile, '29840').then((response) => {\n          dispatch(SetProfileAC(response.data))\n          dispatch(SetPreloaderAC(false))\n        })\n      : profileApi.getUsersProfile(profile, userId).then((response) => {\n          dispatch(SetProfileAC(response.data))\n          dispatch(SetPreloaderAC(false))\n        })\n  }\n}\n\nexport const getProfileStatusTC = (router: any) => {\n  return (dispatch: any) => {\n    dispatch(SetPreloaderAC(true))\n    const profileStatus = '/profile/status'\n    const userId = router.params.userId\n    !userId\n      ? profileApi.getUsersProfileStatus(profileStatus, '29840').then((response) => {\n          dispatch(GetProfileStatusAC(response.data))\n          dispatch(SetPreloaderAC(false))\n        })\n      : profileApi.getUsersProfileStatus(profileStatus, userId).then((response) => {\n          dispatch(GetProfileStatusAC(response.data))\n          dispatch(SetPreloaderAC(false))\n        })\n  }\n}\n\nexport const updateMyStatusTC = (message: string) => {\n  return (dispatch: any) => {\n    dispatch(SetPreloaderAC(true))\n    const profileStatus = '/profile/status'\n    profileApi.updateMyProfileStatus(profileStatus, message).then((response) => {\n      if (response.data.resultCode === 0) {\n        dispatch(UpdateMyStatusAC(message))\n        dispatch(SetPreloaderAC(false))\n      }\n    })\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SACEC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,EACZC,gBAAgB,QACX,oBAAoB;AAE3B,OAAO,MAAMC,YAAY,GAAIC,MAAW,IAAK;EAC3C,OAAQC,QAAa,IAAK;IACxBA,QAAQ,CAACL,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMM,OAAO,GAAG,UAAU;IAC1B,MAAMC,MAAM,GAAGH,MAAM,CAACI,MAAM,CAACD,MAAM;IACnC,CAACA,MAAM,GACHT,UAAU,CAACW,eAAe,CAACH,OAAO,EAAE,OAAO,CAAC,CAACI,IAAI,CAAEC,QAAQ,IAAK;MAC9DN,QAAQ,CAACJ,YAAY,CAACU,QAAQ,CAACC,IAAI,CAAC,CAAC;MACrCP,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,GACFF,UAAU,CAACW,eAAe,CAACH,OAAO,EAAEC,MAAM,CAAC,CAACG,IAAI,CAAEC,QAAQ,IAAK;MAC7DN,QAAQ,CAACJ,YAAY,CAACU,QAAQ,CAACC,IAAI,CAAC,CAAC;MACrCP,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMa,kBAAkB,GAAIT,MAAW,IAAK;EACjD,OAAQC,QAAa,IAAK;IACxBA,QAAQ,CAACL,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMc,aAAa,GAAG,iBAAiB;IACvC,MAAMP,MAAM,GAAGH,MAAM,CAACI,MAAM,CAACD,MAAM;IACnC,CAACA,MAAM,GACHT,UAAU,CAACiB,qBAAqB,CAACD,aAAa,EAAE,OAAO,CAAC,CAACJ,IAAI,CAAEC,QAAQ,IAAK;MAC1EN,QAAQ,CAACN,kBAAkB,CAACY,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3CP,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,GACFF,UAAU,CAACiB,qBAAqB,CAACD,aAAa,EAAEP,MAAM,CAAC,CAACG,IAAI,CAAEC,QAAQ,IAAK;MACzEN,QAAQ,CAACN,kBAAkB,CAACY,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3CP,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMgB,gBAAgB,GAAIC,OAAe,IAAK;EACnD,OAAQZ,QAAa,IAAK;IACxBA,QAAQ,CAACL,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMc,aAAa,GAAG,iBAAiB;IACvChB,UAAU,CAACoB,qBAAqB,CAACJ,aAAa,EAAEG,OAAO,CAAC,CAACP,IAAI,CAAEC,QAAQ,IAAK;MAC1E,IAAIA,QAAQ,CAACC,IAAI,CAACO,UAAU,KAAK,CAAC,EAAE;QAClCd,QAAQ,CAACH,gBAAgB,CAACe,OAAO,CAAC,CAAC;QACnCZ,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;MACjC;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}