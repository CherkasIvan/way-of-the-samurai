{"ast":null,"code":"import { profileApi } from '../../api/api';\nimport { GetProfileStatusAC, SetPreloaderAC, SetProfileAC, UpdateMyStatusAC } from '../actions/actions';\nexport const getProfileTC = router => {\n  return dispatch => {\n    dispatch(SetPreloaderAC(true));\n    const profile = '/profile';\n    const userId = router.params.userId;\n    const authorizedUserId = userId;\n    if (!authorizedUserId) {\n      history.pushState({}, 'login');\n    }\n    !userId ? profileApi.getUsersProfile(profile, '29840').then(response => {\n      dispatch(SetProfileAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    }) : profileApi.getUsersProfile(profile, userId).then(response => {\n      dispatch(SetProfileAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    });\n  };\n};\nexport const getProfileStatusTC = router => {\n  return dispatch => {\n    dispatch(SetPreloaderAC(true));\n    const profileStatus = '/profile/status';\n    const userId = router.params.userId;\n    !userId ? profileApi.getUsersProfileStatus(profileStatus, '29840').then(response => {\n      dispatch(GetProfileStatusAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    }) : profileApi.getUsersProfileStatus(profileStatus, userId).then(response => {\n      dispatch(GetProfileStatusAC(response.data));\n      dispatch(SetPreloaderAC(false));\n    });\n  };\n};\nexport const updateMyStatusTC = message => {\n  return dispatch => {\n    dispatch(SetPreloaderAC(true));\n    const profileStatus = '/profile/status';\n    profileApi.updateMyProfileStatus(profileStatus, message).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(UpdateMyStatusAC(message));\n        dispatch(SetPreloaderAC(false));\n      }\n    });\n  };\n};","map":{"version":3,"names":["profileApi","GetProfileStatusAC","SetPreloaderAC","SetProfileAC","UpdateMyStatusAC","getProfileTC","router","dispatch","profile","userId","params","authorizedUserId","history","pushState","getUsersProfile","then","response","data","getProfileStatusTC","profileStatus","getUsersProfileStatus","updateMyStatusTC","message","updateMyProfileStatus","resultCode"],"sources":["/home/INTEXSOFT/ivan.cherkas/PROJECTS/way-of-the-samurai/src/redux/thunk/profile-thunk.ts"],"sourcesContent":["import { profileApi } from '../../api/api';\nimport {\n  GetProfileStatusAC,\n  SetPreloaderAC,\n  SetProfileAC,\n  UpdateMyStatusAC\n} from '../actions/actions';\n\nexport const getProfileTC = (router: any) => {\n  return (dispatch: any) => {\n    dispatch(SetPreloaderAC(true));\n    const profile = '/profile';\n    const userId = router.params.userId;\n    const authorizedUserId = userId;\n    if (!authorizedUserId) {\n      history.pushState({}, 'login');\n    }\n\n    !userId\n      ? profileApi.getUsersProfile(profile, '29840').then((response) => {\n          dispatch(SetProfileAC(response.data));\n          dispatch(SetPreloaderAC(false));\n        })\n      : profileApi.getUsersProfile(profile, userId).then((response) => {\n          dispatch(SetProfileAC(response.data));\n          dispatch(SetPreloaderAC(false));\n        });\n  };\n};\n\nexport const getProfileStatusTC = (router: any) => {\n  return (dispatch: any) => {\n    dispatch(SetPreloaderAC(true));\n    const profileStatus = '/profile/status';\n    const userId = router.params.userId;\n    !userId\n      ? profileApi\n          .getUsersProfileStatus(profileStatus, '29840')\n          .then((response) => {\n            dispatch(GetProfileStatusAC(response.data));\n            dispatch(SetPreloaderAC(false));\n          })\n      : profileApi\n          .getUsersProfileStatus(profileStatus, userId)\n          .then((response) => {\n            dispatch(GetProfileStatusAC(response.data));\n            dispatch(SetPreloaderAC(false));\n          });\n  };\n};\n\nexport const updateMyStatusTC = (message: string) => {\n  return (dispatch: any) => {\n    dispatch(SetPreloaderAC(true));\n    const profileStatus = '/profile/status';\n    profileApi\n      .updateMyProfileStatus(profileStatus, message)\n      .then((response) => {\n        if (response.data.resultCode === 0) {\n          dispatch(UpdateMyStatusAC(message));\n          dispatch(SetPreloaderAC(false));\n        }\n      });\n  };\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SACEC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,EACZC,gBAAgB,QACX,oBAAoB;AAE3B,OAAO,MAAMC,YAAY,GAAIC,MAAW,IAAK;EAC3C,OAAQC,QAAa,IAAK;IACxBA,QAAQ,CAACL,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMM,OAAO,GAAG,UAAU;IAC1B,MAAMC,MAAM,GAAGH,MAAM,CAACI,MAAM,CAACD,MAAM;IACnC,MAAME,gBAAgB,GAAGF,MAAM;IAC/B,IAAI,CAACE,gBAAgB,EAAE;MACrBC,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;IAChC;IAEA,CAACJ,MAAM,GACHT,UAAU,CAACc,eAAe,CAACN,OAAO,EAAE,OAAO,CAAC,CAACO,IAAI,CAAEC,QAAQ,IAAK;MAC9DT,QAAQ,CAACJ,YAAY,CAACa,QAAQ,CAACC,IAAI,CAAC,CAAC;MACrCV,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,GACFF,UAAU,CAACc,eAAe,CAACN,OAAO,EAAEC,MAAM,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;MAC7DT,QAAQ,CAACJ,YAAY,CAACa,QAAQ,CAACC,IAAI,CAAC,CAAC;MACrCV,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMgB,kBAAkB,GAAIZ,MAAW,IAAK;EACjD,OAAQC,QAAa,IAAK;IACxBA,QAAQ,CAACL,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMiB,aAAa,GAAG,iBAAiB;IACvC,MAAMV,MAAM,GAAGH,MAAM,CAACI,MAAM,CAACD,MAAM;IACnC,CAACA,MAAM,GACHT,UAAU,CACPoB,qBAAqB,CAACD,aAAa,EAAE,OAAO,CAAC,CAC7CJ,IAAI,CAAEC,QAAQ,IAAK;MAClBT,QAAQ,CAACN,kBAAkB,CAACe,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3CV,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,GACJF,UAAU,CACPoB,qBAAqB,CAACD,aAAa,EAAEV,MAAM,CAAC,CAC5CM,IAAI,CAAEC,QAAQ,IAAK;MAClBT,QAAQ,CAACN,kBAAkB,CAACe,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3CV,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC;EACV,CAAC;AACH,CAAC;AAED,OAAO,MAAMmB,gBAAgB,GAAIC,OAAe,IAAK;EACnD,OAAQf,QAAa,IAAK;IACxBA,QAAQ,CAACL,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMiB,aAAa,GAAG,iBAAiB;IACvCnB,UAAU,CACPuB,qBAAqB,CAACJ,aAAa,EAAEG,OAAO,CAAC,CAC7CP,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,IAAI,CAACO,UAAU,KAAK,CAAC,EAAE;QAClCjB,QAAQ,CAACH,gBAAgB,CAACkB,OAAO,CAAC,CAAC;QACnCf,QAAQ,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC;MACjC;IACF,CAAC,CAAC;EACN,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}